#basic database setup

-created database on mongoDB, set up account, whitelisted ip, etc...


#express server setup
-initialized package.json
-installed regular dependencies (express express-validator config mongoose)
-installed dev dependencies (npm i -D nodemon concurrently)
-created server.js and set up basic server:


@file:server.js
@code:

const express = require("express");

//init app
const app = express();

//define request
app.get("/", (req, res) => res.send("API for iceream-shop running"));

//define port
const PORT = process.env.PORT || 5000;


app.listen(PORT()=> console.log(`Server Started on Port ..${PORT}`));



-created some custom scripts;

@file:package.json (in the root)
@code:

"scripts": {
    "start": "node server",
    "server": "nodemon server"
  }

-tested basic server with #npm run server (works in browser and with postman)


#connect to mongoDB database
-copied connection string from mongoDB;
-created a 'config' directory with a file called default.json in it;
-will use the 'config' dependency to create global values that we can use throughout the app;
-saved connection string in a var in the default.json
-created db.js inside the 'config' directory (for the connection logic);

@file: db.js (root)
@code:
const mongoose = require("mongoose");
const config = require("config");
const db = config.get("mongoURI");

const connectDB = async () => {
    try {
        await mongoose.connect(db, { useNewUrlParser: true })
        console.log("MongoDB Connected");
    } catch (err) {
        console.error(err.message);
        //exit process with failure
        process.exit(1);
    }
}

module.exports = connectDB;


-imported the connectDB to the server.js
@file: server.js
@code:

const express = require("express");
const connectDB = require("./config/db");

//init app
const app = express();

//connect to DB
connectDB();

//define request
app.get("/", (req, res) => res.send("API for iceream-shop up and  running"));

//define port
const PORT = process.env.PORT || 5000;


app.listen(PORT, () => console.log(`Server Started on Port ..${PORT}`));


#set up routes
-created folder 'routes/api' directories in the root;
-created icecream.js inside 'api' (this will handle icecream-related requests);
-defined a test route
@file: icecream.js (inside api/routes)
@code:

const express = require("express");
const router = express.Router();


//@route GET api/icecream
//@desc Test Route
//@access Public
router.get("/", (req, res) => res.send('Icecream Route'));

module.exports = router;

-imported the route to the server.js
-tested 



#created the icecream model and the add icecream item route;
-created a folder called 'models' in the root;
-set up middleware in server.js for the post request:

@file:server.js
@code:

const express = require("express");
const connectDB = require("./config/db");

//init app
const app = express();

//connect to DB
connectDB();

//init middleware
app.use(express.json({ extended: false }));

//define request
app.get("/", (req, res) => res.send("API for iceream-shop up and  running"));


//define routes
app.use("/api/icecream", require("./routes/api/icecream"));

//define port
const PORT = process.env.PORT || 5000;


app.listen(PORT, () => console.log(`Server Started on Port ..${PORT}`));


-added validation for the post request on the ice cream fields;
#implemented logic to write the icecream items in the database;
-defined all routes (create/read/update/delete icecream item);



#install react and set up concurrently 

-installed the react front end in the client directory in the root (npx create-react-app client);
-set up 2 more scripts in the package.json in the root:
@file:package.json
@code:
"scripts": {
    "start": "node server",
    "server": "nodemon server",
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server \" \"npm run client\""
  },

-ran npm run dev from root and it starts both server and client;
-ran npm install axios react-router-dom bootstrap




#keep from video 31 (https://www.udemy.com/mern-stack-front-to-back/learn/lecture/10055258#content) min 3 for
redux setup,




##### building app without REDUX (initially);

-set up components and reac router;


### min 1:11:32 (add the form);
https://www.youtube.com/watch?v=7CqJlxBYj-M&t=1483s

